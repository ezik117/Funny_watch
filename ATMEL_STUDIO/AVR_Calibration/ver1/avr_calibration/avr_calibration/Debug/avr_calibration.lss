
avr_calibration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000020c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b1  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040b  00000000  00000000  00000869  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000350  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032b  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bb  00000000  00000000  0000138b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__vector_2>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	38 c0       	rjmp	.+112    	; 0x7e <__vector_6>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a6 36       	cpi	r26, 0x66	; 102
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	70 d0       	rcall	.+224    	; 0x10e <main>
  2e:	b2 c0       	rjmp	.+356    	; 0x194 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_2>:
}


// ------------------------------------------------------------------------------------------------
ISR (PCINT0_vect)
{
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	8f 93       	push	r24
  3e:	9f 93       	push	r25
	if (calibrationComplete) return;
  40:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <calibrationComplete>
  44:	81 11       	cpse	r24, r1
  46:	14 c0       	rjmp	.+40     	; 0x70 <__SREG__+0x31>
	
	if ((PINB & 8) == 8)
  48:	b3 9b       	sbis	0x16, 3	; 22
  4a:	05 c0       	rjmp	.+10     	; 0x56 <__SREG__+0x17>
	{
		ticks = 0;
  4c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <ticks+0x1>
  50:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ticks>
  54:	0d c0       	rjmp	.+26     	; 0x70 <__SREG__+0x31>
	}
	else
	{
		//CLEAR_BIT(PORTB, 4);
		
		reportTick++;
  56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <reportTick>
  5a:	8f 5f       	subi	r24, 0xFF	; 255
  5c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <reportTick>
		countedTicks = ticks;
  60:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ticks>
  64:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <ticks+0x1>
  68:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  6c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		//else
		//{
			//calibrationComplete = TRUE;
		//}
	}
}
  70:	9f 91       	pop	r25
  72:	8f 91       	pop	r24
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

0000007e <__vector_6>:


// ------------------------------------------------------------------------------------------------
ISR (TIM0_COMPA_vect)
{
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	ticks++;
  8c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ticks>
  90:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <ticks+0x1>
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <ticks+0x1>
  9a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ticks>
}
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <delay5>:


// ------------------------------------------------------------------------------------------------
void delay5(uint8_t cycles)
{
	while(cycles--) 
  ac:	88 23       	and	r24, r24
  ae:	41 f0       	breq	.+16     	; 0xc0 <delay5+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	ef ed       	ldi	r30, 0xDF	; 223
  b2:	fe e2       	ldi	r31, 0x2E	; 46
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <delay5+0x8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <delay5+0xe>
  ba:	00 00       	nop
  bc:	81 50       	subi	r24, 0x01	; 1
  be:	c1 f7       	brne	.-16     	; 0xb0 <delay5+0x4>
  c0:	08 95       	ret

000000c2 <dbgSend>:


// ------------------------------------------------------------------------------------------------
#define DBGPIN 4
void dbgSend(uint16_t data, uint8_t bits)
{
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	8c 01       	movw	r16, r24
  ca:	c6 2f       	mov	r28, r22
	SET_BIT(PORTB, DBGPIN);
  cc:	c4 9a       	sbi	0x18, 4	; 24
	delay5(150/5);
  ce:	8e e1       	ldi	r24, 0x1E	; 30
  d0:	ed df       	rcall	.-38     	; 0xac <delay5>
	CLEAR_BIT(PORTB, DBGPIN);
  d2:	c4 98       	cbi	0x18, 4	; 24
	delay5(10/5);
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	ea df       	rcall	.-44     	; 0xac <delay5>
	
	while(bits--)
  d8:	cc 23       	and	r28, r28
  da:	79 f0       	breq	.+30     	; 0xfa <dbgSend+0x38>
	{
		SET_BIT(PORTB, DBGPIN);
  dc:	c4 9a       	sbi	0x18, 4	; 24
		if ((data & 1) == 1)
  de:	00 ff       	sbrs	r16, 0
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <dbgSend+0x26>
			delay5(50/5);
  e2:	8a e0       	ldi	r24, 0x0A	; 10
  e4:	e3 df       	rcall	.-58     	; 0xac <delay5>
  e6:	02 c0       	rjmp	.+4      	; 0xec <dbgSend+0x2a>
		else
			delay5(25/5);
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	e0 df       	rcall	.-64     	; 0xac <delay5>
			
		CLEAR_BIT(PORTB, DBGPIN);
  ec:	c4 98       	cbi	0x18, 4	; 24
		data >>= 1;
  ee:	16 95       	lsr	r17
  f0:	07 95       	ror	r16
		delay5(10/5);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	db df       	rcall	.-74     	; 0xac <delay5>
  f6:	c1 50       	subi	r28, 0x01	; 1
	SET_BIT(PORTB, DBGPIN);
	delay5(150/5);
	CLEAR_BIT(PORTB, DBGPIN);
	delay5(10/5);
	
	while(bits--)
  f8:	89 f7       	brne	.-30     	; 0xdc <dbgSend+0x1a>
		CLEAR_BIT(PORTB, DBGPIN);
		data >>= 1;
		delay5(10/5);
	}
	
	SET_BIT(PORTB, DBGPIN);
  fa:	c4 9a       	sbi	0x18, 4	; 24
	delay5(100/5);
  fc:	84 e1       	ldi	r24, 0x14	; 20
  fe:	d6 df       	rcall	.-84     	; 0xac <delay5>
	CLEAR_BIT(PORTB, DBGPIN);
 100:	c4 98       	cbi	0x18, 4	; 24
	delay5(10/5);
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	d3 df       	rcall	.-90     	; 0xac <delay5>
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	08 95       	ret

0000010e <main>:



int main(void)
{
	sei();
 10e:	78 94       	sei
	
	OSCCAL = 89;
 110:	89 e5       	ldi	r24, 0x59	; 89
 112:	81 bf       	out	0x31, r24	; 49
	
	SET_BIT(DDRB, 4); // PB2 - out, PB3 - in
 114:	bc 9a       	sbi	0x17, 4	; 23

	ticks = countedTicks = reportTick = 0;
 116:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <reportTick>
 11a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 11e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 122:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <ticks+0x1>
 126:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ticks>
	calibrationComplete = FALSE;
 12a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <calibrationComplete>
	
	SET_BIT(TIMSK0, OCIE0A); //включить прерывание по совпадению OCRА
 12e:	89 b7       	in	r24, 0x39	; 57
 130:	84 60       	ori	r24, 0x04	; 4
 132:	89 bf       	out	0x39, r24	; 57
	OCR0A = 149; // 149 = 1мс (1кГц)
 134:	85 e9       	ldi	r24, 0x95	; 149
 136:	86 bf       	out	0x36, r24	; 54
	// (1) ШИМ на пине OC0A отключен
	// (2) ШИМ на пине OC0B отключен
	// (3) CTC режим. Счет идет от 0 до значения в регистре OCR0A
	// (4) Force Output Compare отключен
	// (5) Запустить таймер. Источник частоты SysCLK/64
	TCCR0A = (0<<COM0A1 | 0<<COM0A0) |      // (1)
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	8f bd       	out	0x2f, r24	; 47
			(0<<COM0B1 | 0<<COM0B0) |       // (2)
			(1<<WGM01 | 0<<WGM00);          // (3)
	TCCR0B = (0<<FOC0A | 0<<FOC0B) |        // (4)
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	83 bf       	out	0x33, r24	; 51
			(0<<WGM02) |                    // (3)
			(0<<CS02 | 1<<CS01 | 1<<CS00);  // (5)
		
	SET_BIT(PCMSK, PCINT3); // включить прерывания от порта PB3
 140:	ab 9a       	sbi	0x15, 3	; 21
	SET_BIT(GIMSK, PCIE); // включить прерывания GPIO
 142:	8b b7       	in	r24, 0x3b	; 59
 144:	80 62       	ori	r24, 0x20	; 32
 146:	8b bf       	out	0x3b, r24	; 59
	
	dbgSend(OSCCAL, 16);
 148:	81 b7       	in	r24, 0x31	; 49
 14a:	60 e1       	ldi	r22, 0x10	; 16
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	b9 df       	rcall	.-142    	; 0xc2 <dbgSend>

    while (!calibrationComplete)
 150:	12 c0       	rjmp	.+36     	; 0x176 <main+0x68>
	{
		if (reportTick >= 5)
 152:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <reportTick>
 156:	85 30       	cpi	r24, 0x05	; 5
 158:	70 f0       	brcs	.+28     	; 0x176 <main+0x68>
		{
			cli();
 15a:	f8 94       	cli
			dbgSend(countedTicks, 16);
 15c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 160:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 164:	60 e1       	ldi	r22, 0x10	; 16
 166:	ad df       	rcall	.-166    	; 0xc2 <dbgSend>
			dbgSend(OSCCAL, 16);
 168:	81 b7       	in	r24, 0x31	; 49
 16a:	60 e1       	ldi	r22, 0x10	; 16
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	a9 df       	rcall	.-174    	; 0xc2 <dbgSend>
			reportTick = 0;
 170:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <reportTick>
			sei();			
 174:	78 94       	sei
	SET_BIT(PCMSK, PCINT3); // включить прерывания от порта PB3
	SET_BIT(GIMSK, PCIE); // включить прерывания GPIO
	
	dbgSend(OSCCAL, 16);

    while (!calibrationComplete)
 176:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <calibrationComplete>
 17a:	88 23       	and	r24, r24
 17c:	51 f3       	breq	.-44     	; 0x152 <main+0x44>
			reportTick = 0;
			sei();			
		}
	}
	
	dbgSend(countedTicks, 16);
 17e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 182:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 186:	60 e1       	ldi	r22, 0x10	; 16
 188:	9c df       	rcall	.-200    	; 0xc2 <dbgSend>
	dbgSend(OSCCAL, 16);
 18a:	81 b7       	in	r24, 0x31	; 49
 18c:	60 e1       	ldi	r22, 0x10	; 16
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	98 df       	rcall	.-208    	; 0xc2 <dbgSend>
 192:	ff cf       	rjmp	.-2      	; 0x192 <main+0x84>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
